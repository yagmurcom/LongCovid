X_meta = df_meta_encoded
y = labels

X_train, X_test, y_train, y_test = train_test_split(X_meta , y, test_size=0.3, random_state=42,stratify=y)

#Calculate the class weight and reweigh
unique_classes = np.unique(y_train)
class_weights = compute_class_weight('balanced', classes=unique_classes, y=y_train.values.reshape(-1))
class_weights_dict = dict(enumerate(class_weights))
print('class weights',class_weights_dict)

#Define the model, will use liblinear solver, and apply reweighing. 
Logit_cv = LogisticRegression(class_weight=class_weights_dict, random_state=42, solver='liblinear')
Logit_cv.fit(X_train, y_train)

param_grid = {'C': np.logspace(-3, 1, 100)}

NUM_TRIALS = 10

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X_meta)

#Nested CV to optimize on weighed F1 - SCALED clinical variables only

nested_scores_clinical_accuracy = np.zeros(NUM_TRIALS)

for i in range(NUM_TRIALS):
    inner_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    grid_search = GridSearchCV(Logit_cv, param_grid, cv=inner_cv, scoring='accuracy')
    cv_scores = cross_val_score(grid_search, X=X_scaled, y=y, cv=outer_cv, scoring='accuracy')
    nested_scores_clinical_accuracy[i] = cv_scores.mean()

print("Nested CV (scaled clinical variables) accuracy - mean={:.2f}, SD={:.2f}".format(
    nested_scores_clinical_accuracy.mean(), nested_scores_clinical_accuracy.std()
))

##Nested CV (scaled clinical variables) accuracy - mean=0.67, SD=0.01 
##array([0.65789474, 0.67894737, 0.67105263, 0.68157895, 0.66578947,
  ##     0.66315789, 0.67631579, 0.65789474, 0.63421053, 0.67368421])

###LOGIT with microbiome at species level as input data 

X_species = df_species
y = labels

scaler = MinMaxScaler()
X_scaled_species = scaler.fit_transform(X_species)

#Nested CV to optimize on accuracy - SCALED microbiome only

nested_scores_microbiome_accuracy = np.zeros(NUM_TRIALS)

for i in range(NUM_TRIALS):
    inner_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    grid_search = GridSearchCV(Logit_cv, param_grid, cv=inner_cv, scoring='accuracy')
    cv_scores = cross_val_score(grid_search, X=X_scaled_species, y=y, cv=outer_cv, scoring='accuracy')
    nested_scores_microbiome_accuracy[i] = cv_scores.mean()

print("nested_scores_microbiome_accuracy - mean={:.2f}, SD={:.2f}".format(
    nested_scores_microbiome_accuracy.mean(), nested_scores_microbiome_accuracy.std()
))


#####LOGIT with microbiome and clinical variables

X_combined = pd.concat([X_meta, df_species], axis=1)

scaler = MinMaxScaler()
X_combined_scaled = scaler.fit_transform(X_combined)
X_combined_scaled = pd.DataFrame(X_combined_scaled)
X_combined_scaled.columns = X_combined.columns

X_combined_scaled.head(5)

nested_scores_microbiome_clinical_accuracy = np.zeros(NUM_TRIALS)

for i in range(NUM_TRIALS):
    inner_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    grid_search = GridSearchCV(Logit_cv, param_grid, cv=inner_cv, scoring='accuracy')
    cv_scores = cross_val_score(grid_search, X=X_combined_scaled, y=y, cv=outer_cv, scoring='accuracy')
    nested_scores_microbiome_clinical_accuracy[i] = cv_scores.mean()

print("nested_scores_microbiome_clinical_accuracy - mean={:.2f}, SD={:.2f}".format(
    nested_scores_microbiome_clinical_accuracy.mean(), nested_scores_microbiome_clinical_accuracy.std()
))

