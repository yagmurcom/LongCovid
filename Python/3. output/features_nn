import shap
import numpy as np

NUM_TRIALS = 10 
nested_scores = np.zeros(NUM_TRIALS)
best_params_list = []
top_features_shap_values_list = []


def create_model_microbiome(neurons=64,dropout_rate=0.5):
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(neurons, activation='relu', input_shape=(X_combined_scaled.shape[1],)),
        tf.keras.layers.Dropout(dropout_rate),
        tf.keras.layers.Dense(neurons // 2, activation='relu'),
        tf.keras.layers.Dropout(dropout_rate),
        tf.keras.layers.Dense(1, activation='sigmoid')  
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['AUC'])
    return model

dropout_rates = [0, 0.2, 0.4, 0.6]

model = KerasClassifier(model=create_model_microbiome, epochs=50, verbose=0,class_weight=class_weights_dict,callbacks=[callback])


for i in range(NUM_TRIALS):
    outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=i)
    for train_index, test_index in outer_cv.split(X_combined_scaled, y):
        X_train, X_test = X_combined_scaled.iloc[train_index], X_combined_scaled.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        best_accuracy  = 0
        best_dropout_rate = None       
        for dropout_rate in dropout_rates:
            model = create_model_microbiome(dropout_rate=dropout_rate)
            model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['AUC'])
            model.fit(X_train, y_train, epochs=50, verbose=0, class_weight=class_weights_dict,callbacks=[callback])
            _, accuracy = model.evaluate(X_test, y_test, verbose=0)
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_dropout_rate = dropout_rate
        best_params_list.append({'dropout_rate': best_dropout_rate})
        model = create_model_microbiome(dropout_rate=best_dropout_rate)
        model.fit(X_train, y_train, epochs=50, verbose=0, class_weight=class_weights_dict,callbacks=[callback])
        explainer = shap.GradientExplainer(model, X_train.values)
        shap_values = explainer.shap_values(X_test.values)[0] 
        shap_sum = np.abs(shap_values).mean(axis=0)
        shap_feature_importance = pd.DataFrame(list(zip(X_train.columns, shap_sum)), columns=['feature', 'shap_importance'])
        shap_feature_importance.sort_values(by='shap_importance', ascending=False, inplace=True)
        top_features_shap = shap_feature_importance.head(20)
        top_features_shap_values_list.append((best_dropout_rate, top_features_shap))

#print("Nested CV best AUC - mean={:.2f}, SD={:.2f}".format(nested_scores.mean(), nested_scores.std()))
print("Best dropout rates per outer fold:", [params['dropout_rate'] for params in best_params_list])
for idx, (dropout_rate, top_features_shap) in enumerate(top_features_shap_values_list, 1):
    print(f"Top 20 features and SHAP values for fold {idx} with dropout rate {dropout_rate}:")
    print(top_features_shap)

